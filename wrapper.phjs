/*

    wrapper.phjs: $distribution_URI

    Copyright © 2012 World Wide Web Consortium, (Massachusetts
    Institute of Technology, European Research Consortium for
    Informatics and Mathematics, Keio University). All Rights
    Reserved. This work is distributed under the W3C® Software License
    [1] in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.

    [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231

    This program is intended to be executed using phantomjs [2].

    syntax: phantomjs wrapper.phjs <Your_Script.js> <URL>

    Your_script.js defines a function __result_handler, which returns one of:
     - "WRAPPER:TRY_AGAIN"
       the return value is not yet available and the wrapper should retry
     - "WRAPPER:EXIT"
       the return value cannot be found and the wrapper should give up
     - a value
       a simple object, i.e. no function or closure.

    [2] http://phantomjs.org/

*/

var page = require('webpage').create();
var system = require('system');
var debug = false;

var number_of_try = 20;

if (system.args[1] === undefined
    || system.args[2] === undefined) {
  console.error('[error] wrapper.phjs: Missing arguments');
  console.error('[error]   use phantomjs wrapper.phjs <file.js> <URL>');
  phantom.exit(1);
}

if (debug) {
  console.error('[debug] wrapper.phjs: trying ' + system.args[2]);
}

function result_handler() {
  var results;
  try {
    results = page.evaluate(function () {
      return __result_handler();
    });
  } catch(e) {
    console.error('[error] wrapper.phjs: oops, we crashed in flames with ' + system.args[1]);
    phantom.exit(3);
  }
  if (results === "WRAPPER:TRY_AGAIN") {
    if (number_of_try-- > 0) {
      if (debug) {
        console.error('[debug] wrapper.phjs: new attempts [' + number_of_try + ']');
      }
      window.setTimeout(function() { result_handler(); }, 100);
    } else {
      console.error('[error] wrapper.phjs: giving up after several attempts ' + system.args[2]);
      phantom.exit(4);
    }
  } else if (results === "WRAPPER:EXIT") {
    console.error('[error] wrapper.phjs: giving up on ' + system.args[2]);
    phantom.exit(4);
  } else {
    if (debug) {
      console.error('[debug] Result is of type ' + typeof results);
    }
    try {
      switch (typeof results) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        console.log(results);
        break;
      case "object":
        console.log(JSON.stringify(results, undefined, 2));
        break;
      default:
        console.error("[warn] wrapper.phjs: Unknown result")
        console.log(results);
        break;
      }
    } catch(e) {
      phantom.exit(3);
    }
    phantom.exit(0);
  }
}

page.onResourceError = function(resourceError) {
  if (debug) {
    console.error('[debug] wrapper.phjs: page.open ' + resourceError.errorString + ' ' + resourceError.url);
  }
};


page.open(system.args[2], function (status) {
  if (debug) {
    console.error('[debug] wrapper.phjs: page.open ' + system.args[2]);
  }

  if (status !== 'success') {
    console.error('[error] wrapper.phjs: unable to access ' + system.args[2]);
    phantom.exit(1);
  } else {
    if (debug) {
      console.error('[debug] wrapper.phjs: success ' + system.args[2]);
    }
    var inject = page.injectJs(system.args[1]);
    if (inject) {
      if (debug) {
        console.error('[debug] wrapper.phjs: injected ' + system.args[1]);
      }
      result_handler();
    } else {
      console.error('[error] wrapper.phjs: unable to inject ' + system.args[1]);
      phantom.exit(2);
    }
  }
});
